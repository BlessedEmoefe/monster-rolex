{"version":3,"sources":["serviceWorker.js","components/card/Card.js","components/card-list/CardList.jsx","components/searchBox/SearchBox.js","Header.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","individual","id","name","email","CardList","monster","map","key","SearchBox","placeholder","handleChange","type","onChange","Header","state","searchfield","e","setState","target","value","fetch","then","response","json","issue","this","FieldMonster","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCNSC,G,YATF,SAACC,GACd,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,WAAWC,GAA3C,4BACtB,4BAAML,EAAMI,WAAWE,MACvB,2BAAIN,EAAMI,WAAWG,UCGdC,EAPE,SAACR,GACd,OACI,yBAAKC,UAAU,YACRD,EAAMS,QAAQC,KAAI,SAAAN,GAAU,OAAE,kBAAC,EAAD,CAAMO,IAAKX,EAAMS,QAAQJ,GAAID,WAAYA,SCQvEQ,G,YAXE,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aAC/B,OACI,6BACH,2BACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACZG,SAAUF,OCyBGG,E,2MA9BXC,MAAQ,CACTT,QAAQ,GACRU,YAAY,I,EAQfL,aAAe,SAAAM,GACX,EAAKC,SAAS,CAACF,YAAYC,EAAEE,OAAOC,S,mFAPf,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKP,SAAS,CAACZ,QAAQmB,S,+BAO/B,IAAD,EAC2BC,KAAKX,MAA7BT,EADH,EACGA,QAAQU,EADX,EACWA,YACVW,EAAerB,EAAQsB,QAAO,SAAA3B,GAAU,OAAIA,EAAWE,KAAK0B,cAAcC,SAASd,EAAYa,kBAErG,OACI,yBAAK/B,UAAU,UACX,gDACD,kBAAC,EAAD,CACAY,YAAY,iBACZC,aAAce,KAAKf,eAClB,kBAAC,EAAD,CAAUL,QAASqB,S,GAzBdI,aCErBC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SL4H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.c61c7466.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport \"./card.style.css\"\n\nconst Card = (props) =>{\nreturn(\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.individual.id}?set=set2&size=180x180`} />\n        <h2 >{props.individual.name}</h2>\n        <p>{props.individual.email}</p>\n    </div>\n)\n}\nexport default Card;","import React from \"react\"\nimport \"./cardlist.style.css\"\nimport Card from \"../card/Card\"\n\nconst CardList = (props) =>{\n    return(\n        <div className=\"cardlist\">\n              {props.monster.map(individual=><Card key={props.monster.id} individual={individual}/>)}\n        </div>\n    )\n}\nexport default CardList;","import React from \"react\"\n\nimport \"./searchBox.style.css\"\n\nconst SearchBox =({placeholder,handleChange})=>{\nreturn(\n    <div>\n <input \n className=\"search\"\n type=\"search\" \n placeholder={placeholder}\n  onChange={handleChange}/>\n    </div>\n)\n}\nexport default SearchBox;","import React,{Component} from \"react\"\nimport CardList from \"./components/card-list/CardList.jsx\"\nimport \"./header.style.css\"\nimport SearchBox from \"./components/searchBox/SearchBox.js\";\n\nclass Header extends Component {\n    state = { \n   monster:[],\n   searchfield:''\n     }\n     componentDidMount(){\n         fetch(\"https://jsonplaceholder.typicode.com/users\")\n         .then(response=>response.json())\n         .then(issue=>this.setState({monster:issue}))\n     }\n\nhandleChange = e => {\n    this.setState({searchfield:e.target.value})\n}\n\n    render() { \n        const { monster,searchfield } = this.state\n        const FieldMonster = monster.filter(individual => individual.name.toLowerCase().includes(searchfield.toLowerCase())) \n        \n        return ( \n            <div className=\"header\">\n                <h1>MOnsters Rolodex</h1>\n               <SearchBox\n               placeholder=\"search monster\"\n               handleChange={this.handleChange} />\n                <CardList monster={FieldMonster} />\n            </div>\n         );\n    }\n}\n \nexport default Header;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\"\nimport * as serviceWorker from './serviceWorker';\nimport Header from \"./Header\"\nimport CardList from './components/card-list/CardList';\n\nReactDOM.render(<Header />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}